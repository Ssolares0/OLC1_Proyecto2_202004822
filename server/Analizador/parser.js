/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,24],$Ve=[1,25],$Vf=[2,5,19,23,34,39,41,44,46,47,48,66,67,69,70,71,75,76,77],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[30,34],$Vk=[1,60],$Vl=[1,52],$Vm=[1,53],$Vn=[1,59],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[1,58],$Vs=[2,20],$Vt=[1,62],$Vu=[1,64],$Vv=[8,28,30,72],$Vw=[2,64],$Vx=[8,25],$Vy=[1,78],$Vz=[1,77],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[1,85],$VH=[1,86],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[8,20,25,37,51,52,53,54,55,56,57,58,59,60,61,62,63,64],$VN=[8,20,25,31,37,38,51,52,53,54,55,56,57,58,59,60,61,62,63,64],$VO=[8,20,25,37,51,52,57,58,59,60,61,62,63,64],$VP=[8,20,25,37,51,52,53,54,57,58,59,60,61,62,63,64],$VQ=[8,20,25,37,57,58,59,60,61,62,63,64],$VR=[1,145],$VS=[41,46,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstruccion":4,"EOF":5,"instruccion":6,"print":7,"PUNTOCOMA":8,"declaraVar":9,"declaraVect":10,"asignacion":11,"incanddec":12,"instrIf":13,"switches":14,"instrWhile":15,"instrFor":16,"instrFunciones":17,"sentenControl":18,"RCOUT":19,"MENOR_MENOR":20,"expresion":21,"RENDL":22,"RPRINTLN":23,"PARIZQ":24,"PARDER":25,"tipos":26,"listaval":27,"IGUAL":28,"instrTernario":29,"CORCHIZQ":30,"CORCHDER":31,"NEW":32,"datos":33,"VARIABLES":34,"INCREMENTO":35,"DECREMENTO":36,"TERNARIO":37,"DOSPUNTOS":38,"IF":39,"LLAIZQ":40,"LLADER":41,"instrElse":42,"ELSE":43,"SWITCH":44,"listacasos":45,"DEFAULT":46,"WHILE":47,"FOR":48,"for_declaracion":49,"listaParametros":50,"MENOS":51,"MAS":52,"POR":53,"DIV":54,"POTENCIA":55,"MODULO":56,"REL_IGUAL":57,"MENOR":58,"MAYOR":59,"MENORIGUAL":60,"MAYORIGUAL":61,"DIFERENTE":62,"AND":63,"OR":64,"NOT":65,"INT":66,"STD":67,"STRING":68,"CHAR":69,"BOOL":70,"DOUBLE":71,"COMA":72,"listavalFunciones":73,"caso":74,"CASE":75,"BREAK":76,"CONTINUE":77,"ENTERO":78,"DECIMAL":79,"CARACTER":80,"CADENA":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",19:"RCOUT",20:"MENOR_MENOR",22:"RENDL",23:"RPRINTLN",24:"PARIZQ",25:"PARDER",28:"IGUAL",30:"CORCHIZQ",31:"CORCHDER",32:"NEW",34:"VARIABLES",35:"INCREMENTO",36:"DECREMENTO",37:"TERNARIO",38:"DOSPUNTOS",39:"IF",40:"LLAIZQ",41:"LLADER",43:"ELSE",44:"SWITCH",46:"DEFAULT",47:"WHILE",48:"FOR",51:"MENOS",52:"MAS",53:"POR",54:"DIV",55:"POTENCIA",56:"MODULO",57:"REL_IGUAL",58:"MENOR",59:"MAYOR",60:"MENORIGUAL",61:"MAYORIGUAL",62:"DIFERENTE",63:"AND",64:"OR",65:"NOT",66:"INT",67:"STD",68:"STRING",69:"CHAR",70:"BOOL",71:"DOUBLE",72:"COMA",73:"listavalFunciones",75:"CASE",76:"BREAK",77:"CONTINUE",78:"ENTERO",79:"DECIMAL",80:"CARACTER",81:"CADENA"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[7,3],[7,5],[7,4],[9,4],[9,2],[9,4],[10,10],[10,15],[12,2],[12,2],[29,5],[13,8],[42,4],[42,2],[42,0],[14,10],[14,7],[14,9],[15,7],[16,11],[49,1],[49,1],[17,8],[17,7],[11,3],[21,2],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[21,1],[26,1],[26,4],[26,1],[26,1],[26,1],[27,3],[27,1],[50,4],[50,2],[45,2],[45,1],[74,4],[18,1],[18,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$=[]; this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 14: case 28:
this.$=$$[$0-1];
break;
case 9: case 10: case 11: case 12: case 13: case 29: case 36: case 37: case 57: case 58: case 59: case 60: case 61: case 62:
this.$=$$[$0];
break;
case 15:
console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 16:
this.$=new Print($$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 17:
this.$=new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 18:
this.$=new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 19: case 21:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 20:
this.$=new Declaracion($$[$0],$$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 22:
this.$=new Declaracion($$[$0-8],$$[$0-9],$$[$0-1],$$[$0-3],$$[$0-6],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 23:
this.$=new Declaracion($$[$0-13],$$[$0-14],null,null,_$[$0-14].first_line,_$[$0-14].first_column);
break;
case 24: case 25:
this.$=new IncreDecre($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 26:
this.$=new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 27:
this.$=new If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 30:
this.$=null;
break;
case 31:
this.$=new Switch($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 32:
this.$=new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 33:
this.$=new Switch($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 34:
this.$=new Whiles($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 35:
this.$=new Fors($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 38:
this.$=new Funciones($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 39:
this.$=new Funciones($$[$0-5],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 40:
this.$=new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 41:
this.$=new Aritmetica($$[$0],$$[$0],'NEGACION');
break;
case 42: case 43: case 44: case 45: case 46: case 47:
this.$=new Aritmetica($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48: case 49: case 50: case 51: case 52: case 53:
this.$=new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54: case 55:
this.$=new Logicos($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 56:
this.$=new Logicos($$[$0],$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 63:
 this.$.push($$[$0]);this.$=$$[$0-2]
break;
case 64: case 68:
this.$=[$$[$0]];
break;
case 65:
 this.$.push($$[$0-1]);this.$=$$[$0-3]
break;
case 66:
this.$=[$$[$0-1]];
break;
case 67:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 69:
this.$={case: $$[$0-2],body:$$[$0]};
break;
case 70:
this.$= new Breaks(_$[$0].first_line,_$[$0].first_column);
break;
case 71:
this.$='continue';
break;
case 72:
this.$=new Dato($$[$0],TipoDato.ENTERO,_$[$0].first_line,_$[$0].first_column);
break;
case 73:
this.$=new Dato($$[$0],TipoDato.DECIMAL,_$[$0].first_line,_$[$0].first_column);
break;
case 74:
this.$=new Dato($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column);
break;
case 75:
this.$=new Dato($$[$0],TipoDato.CADENA,_$[$0].first_line,_$[$0].first_column);
break;
case 76:
this.$=new Dato($$[$0],TipoDato.BOOL,_$[$0].first_line,_$[$0].first_column);
break;
case 77:
this.$ = new Vars($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{1:[3]},{2:$V0,5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},o($Vf,[2,3]),{8:[1,33]},{8:[1,34]},{8:[1,35]},{8:[1,36]},{8:[1,37]},o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),{8:[1,38]},o($Vf,[2,15]),{20:[1,39]},{24:[1,40]},{27:41,34:[1,42]},{28:$Vg,35:$Vh,36:$Vi},{24:[1,46]},{24:[1,47]},{24:[1,48]},{24:[1,49]},{8:[2,70]},{8:[2,71]},o($Vj,[2,58]),{38:[1,50]},o($Vj,[2,60]),o($Vj,[2,61]),o($Vj,[2,62]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,14]),{21:51,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:61,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{8:$Vs,28:$Vt,30:[1,63],72:$Vu},o($Vv,$Vw,{24:[1,65]}),{21:66,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},o($Vx,[2,24]),o($Vx,[2,25]),{21:67,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:68,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:69,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{9:71,11:72,26:73,34:[1,74],49:70,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc},{38:[1,75]},{8:[2,16],20:[1,76],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{21:91,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:92,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},o($VM,[2,57]),o($VN,[2,72]),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),{25:[1,93],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{21:94,29:95,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{31:[1,96]},{34:[1,97]},{25:[1,99],26:101,50:98,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,73:[1,100]},{8:[2,40],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{25:[1,102],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{25:[1,103],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{25:[1,104],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{8:[1,105]},{8:[2,36]},{8:[2,37]},{27:106,34:[1,107]},{28:$Vg},{68:[1,108]},{22:[1,109]},{21:110,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:111,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:112,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:113,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:114,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:115,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:116,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:117,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:118,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:119,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:120,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:121,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:122,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{21:123,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},o($VO,[2,41],{53:$VA,54:$VB,55:$VC,56:$VD}),o($VM,[2,56]),{8:[2,18]},{8:[2,19],37:[1,124],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{8:[2,21]},{28:[1,125],30:[1,126]},o($Vv,[2,63]),{25:[1,127]},{40:[1,128]},{72:[1,129]},{34:[1,130]},{40:[1,131]},{40:[1,132]},{40:[1,133]},{21:134,33:54,34:$Vk,51:$Vl,65:$Vm,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{8:$Vs,28:$Vt,72:$Vu},o([8,28,72],$Vw),o($Vj,[2,59]),{8:[2,17]},o($VO,[2,42],{53:$VA,54:$VB,55:$VC,56:$VD}),o($VO,[2,43],{53:$VA,54:$VB,55:$VC,56:$VD}),o($VP,[2,44],{55:$VC,56:$VD}),o($VP,[2,45],{55:$VC,56:$VD}),o($VM,[2,46]),o($VM,[2,47]),o($VQ,[2,48],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VQ,[2,49],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VQ,[2,50],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VQ,[2,51],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VQ,[2,52],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o($VQ,[2,53],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD}),o([8,20,25,37,63,64],[2,54],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ}),o([8,20,25,37,64],[2,55],{51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK}),{33:135,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{32:[1,136]},{31:[1,137]},{40:[1,138]},{2:$V0,4:139,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{26:140,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc},{25:[2,66]},{2:$V0,4:141,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{45:142,46:[1,143],74:144,75:$VR},{2:$V0,4:146,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{8:[1,147],51:$Vy,52:$Vz,53:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK,64:$VL},{38:[1,148]},{26:149,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc},{28:[1,150]},{2:$V0,4:151,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,152],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{34:[1,153]},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,154],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{41:[1,156],46:[1,155],74:157,75:$VR},{38:[1,158]},o($VS,[2,68]),{33:159,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,160],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{12:161,34:[1,162]},{33:163,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{30:[1,164]},{32:[1,165]},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,166],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},o($Vf,[2,39]),{25:[2,65]},o($Vf,[2,30],{42:167,43:[1,168]}),{38:[1,169]},o($Vf,[2,32]),o($VS,[2,67]),{2:$V0,4:170,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{38:[1,171]},o($Vf,[2,34]),{25:[1,172]},{35:$Vh,36:$Vi},{8:[2,26]},{33:173,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{26:174,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc},o($Vf,[2,38]),o($Vf,[2,27]),{13:176,39:$V4,40:[1,175]},{2:$V0,4:177,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,178],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{2:$V0,4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{40:[1,180]},{31:[1,181]},{30:[1,182]},{2:$V0,4:183,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},o($Vf,[2,29]),{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,184],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},o($Vf,[2,33]),o($VS,[2,69],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,26:18,6:32,2:$V0,19:$V1,23:$V2,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve}),{2:$V0,4:185,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{8:[2,22]},{33:186,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,187],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},o($Vf,[2,31]),{2:$V0,6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,23:$V2,26:18,34:$V3,39:$V4,41:[1,188],44:$V5,47:$V6,48:$V7,66:$V8,67:$V9,69:$Va,70:$Vb,71:$Vc,76:$Vd,77:$Ve},{31:[1,189]},o($Vf,[2,28]),o($Vf,[2,35]),{30:[1,190]},{33:191,34:$Vk,70:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr},{31:[1,192]},{8:[2,23]}],
defaultActions: {24:[2,70],25:[2,71],31:[2,1],71:[2,36],72:[2,37],93:[2,18],95:[2,21],109:[2,17],130:[2,66],153:[2,65],163:[2,26],181:[2,22],192:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {TipoDato}= require('../Interprete/Expresion.js');
    const Dato = require('../Interprete/expresion/Dato.js');
    const Print = require('../Interprete/instruccion/print.js');
    const Aritmetica =require('../Interprete/expresion/Aritmetica.js');
    const Logicos =require('../Interprete/expresion/Logicos.js');
    const Relacionales =require('../Interprete/expresion/Relacionales.js');
    const Declaracion =require('../Interprete/instruccion/declaracion.js');
    const If =require('../Interprete/instruccion/if.js');
    const Ternario = require('../Interprete/expresion/Ternario.js');
    const Vars = require('../Interprete/expresion/Vars.js');
    const IncreDecre = require('../Interprete/expresion/IncreDecre.js');
    const Switch = require('../Interprete/instruccion/Switch.js');
    const Breaks = require('../Interprete/instruccion/breaks.js');
    const Whiles = require('../Interprete/instruccion/Whiles.js');
    const Fors = require('../Interprete/instruccion/Fors.js');
    const Asignacion = require('../Interprete/instruccion/Asignacion.js');
    const Funciones = require('../Interprete/instruccion/Funciones.js');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 66; 
break;
case 3: return 68; 
break;
case 4: return 69; 
break;
case 5: return 70; 
break;
case 6: return 71; 
break;
case 7: return 67; 
break;
case 8: return 39; 
break;
case 9: return 43; 
break;
case 10: return 32; 
break;
case 11: return 23; 
break;
case 12: return 19; 
break;
case 13: return 22; 
break;
case 14: return 44; 
break;
case 15: return 75; 
break;
case 16: return 46; 
break;
case 17: return 76; 
break;
case 18: return 77; 
break;
case 19: return 47;
break;
case 20: return 48;
break;
case 21: return 20; 
break;
case 22: return 24; 
break;
case 23: return 25; 
break;
case 24: return 40; 
break;
case 25: return 41; 
break;
case 26: return 30; 
break;
case 27: return 31; 
break;
case 28: return 8; 
break;
case 29: return 72; 
break;
case 30: return 35; 
break;
case 31: return 36; 
break;
case 32: return 52; 
break;
case 33: return 51; 
break;
case 34: return 54; 
break;
case 35: return 53; 
break;
case 36:return "POTENCIA";
break;
case 37:return "MODULO";
break;
case 38: return 60; 
break;
case 39: return 58; 
break;
case 40: return 61; 
break;
case 41: return 59; 
break;
case 42: return 62; 
break;
case 43: return 57; 
break;
case 44: return 28; 
break;
case 45: return 37; 
break;
case 46: return 38; 
break;
case 47: return 64; 
break;
case 48: return 63; 
break;
case 49: return 65; 
break;
case 50:/* Espacios se ignoran */
break;
case 51: return 79; 
break;
case 52: return 78; 
break;
case 53: return 80; 
break;
case 54: return 81; 
break;
case 55: return 70; 
break;
case 56: return 34; 
break;
case 57:return 5;
break;
case 58: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:std\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:println\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:<<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \s\r\n\t])/i,/^(?:([0-9]+(\.)[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:((‚Äò|')(.{1,2})(‚Äô|')))/i,/^(?:(("|‚Äú)(\\.|[^\"])*("|‚Äù)))/i,/^(?:(true|false\b))/i,/^(?:([a-zA-Z_]+\w*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}