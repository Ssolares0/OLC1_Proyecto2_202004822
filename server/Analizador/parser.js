/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,22],$V3=[1,34],$V4=[1,24],$V5=[1,25],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,26],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,32],$Vi=[1,33],$Vj=[2,5,24,28,31,32,43,45,48,50,52,53,54,57,58,76,77,79,80,81,83,84,85],$Vk=[1,59],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,66],$Vp=[1,62],$Vq=[1,63],$Vr=[1,71],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[32,37],$Vx=[2,27],$Vy=[1,81],$Vz=[1,83],$VA=[8,36,37,59],$VB=[2,79],$VC=[8,30],$VD=[1,91],$VE=[1,90],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,104],$VS=[8,25,30,51,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75],$VT=[2,92],$VU=[8,25,30,38,51,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75],$VV=[1,127],$VW=[30,59],$VX=[8,25,30,51,59,60,61,66,67,68,69,70,71,72,73],$VY=[1,158],$VZ=[8,25,30,51,59,60,61,62,63,65,66,67,68,69,70,71,72,73],$V_=[8,25,30,51,59,66,67,68,69,70,71,72,73],$V$=[1,180],$V01=[45,50,83],$V11=[1,196];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstruccion":4,"EOF":5,"instruccion":6,"print":7,"PUNTOCOMA":8,"declaraVar":9,"declaraVect1D_1":10,"asignacion":11,"incanddec":12,"instrIf":13,"returns":14,"switches":15,"instrWhile":16,"instrDoWHILE":17,"instrFor":18,"instrFunciones":19,"instrMetodos":20,"llamada":21,"sentenControl":22,"execute":23,"RCOUT":24,"MENOR_MENOR":25,"expresion":26,"RENDL":27,"RPRINTLN":28,"PARIZQ":29,"PARDER":30,"EXECUTE":31,"VARIABLES":32,"llamada_parm":33,"tipos":34,"listaval":35,"IGUAL":36,"CORCHIZQ":37,"CORCHDER":38,"NEW":39,"datos":40,"INCREMENTO":41,"DECREMENTO":42,"IF":43,"LLAIZQ":44,"LLADER":45,"instrElse":46,"ELSE":47,"SWITCH":48,"listacasos":49,"DEFAULT":50,"DOSPUNTOS":51,"WHILE":52,"DO":53,"FOR":54,"for_declaracion":55,"listaParametros":56,"VOID":57,"RETURN":58,"COMA":59,"MENOS":60,"MAS":61,"POR":62,"DIV":63,"POTENCIA":64,"MODULO":65,"REL_IGUAL":66,"MENOR":67,"MAYOR":68,"MENORIGUAL":69,"MAYORIGUAL":70,"DIFERENTE":71,"AND":72,"OR":73,"NOT":74,"TERNARIO":75,"INT":76,"STD":77,"STRING":78,"CHAR":79,"BOOL":80,"DOUBLE":81,"caso":82,"CASE":83,"BREAK":84,"CONTINUE":85,"ENTERO":86,"DECIMAL":87,"CARACTER":88,"CADENA":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOCOMA",24:"RCOUT",25:"MENOR_MENOR",27:"RENDL",28:"RPRINTLN",29:"PARIZQ",30:"PARDER",31:"EXECUTE",32:"VARIABLES",36:"IGUAL",37:"CORCHIZQ",38:"CORCHDER",39:"NEW",41:"INCREMENTO",42:"DECREMENTO",43:"IF",44:"LLAIZQ",45:"LLADER",47:"ELSE",48:"SWITCH",50:"DEFAULT",51:"DOSPUNTOS",52:"WHILE",53:"DO",54:"FOR",57:"VOID",58:"RETURN",59:"COMA",60:"MENOS",61:"MAS",62:"POR",63:"DIV",64:"POTENCIA",65:"MODULO",66:"REL_IGUAL",67:"MENOR",68:"MAYOR",69:"MENORIGUAL",70:"MAYORIGUAL",71:"DIFERENTE",72:"AND",73:"OR",74:"NOT",75:"TERNARIO",76:"INT",77:"STD",78:"STRING",79:"CHAR",80:"BOOL",81:"DOUBLE",83:"CASE",84:"BREAK",85:"CONTINUE",86:"ENTERO",87:"DECIMAL",88:"CARACTER",89:"CADENA"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[7,3],[7,5],[7,4],[23,5],[23,4],[9,4],[9,2],[10,10],[12,2],[12,2],[13,8],[46,4],[46,2],[46,0],[15,10],[15,7],[15,9],[16,7],[17,8],[18,11],[55,1],[55,1],[19,8],[19,7],[20,8],[20,7],[14,2],[14,1],[21,4],[21,3],[33,3],[33,1],[11,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[26,5],[26,1],[34,1],[34,4],[34,1],[34,1],[34,1],[35,3],[35,1],[56,4],[56,2],[49,2],[49,1],[82,4],[22,1],[22,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$=[]; this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 17: case 18: case 19: case 32:
this.$=$$[$0-1];
break;
case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 33: case 41: case 42: case 70: case 72: case 73: case 74: case 75: case 76: case 77:
this.$=$$[$0];
break;
case 20:

        console.error('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
        
        sng.addError(new Error("Error sintáctico:", yytext,this._$.first_line, this._$.first_column));
        
break;
case 21:
this.$=new Print($$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 22:
this.$=new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 23:
this.$=new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 24:
this.$=new Execute($$[$0-3],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 25:
this.$=new Execute($$[$0-2],[],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 26:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 27:
this.$=new Declaracion($$[$0],$$[$0-1],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 28:
this.$=new DecVec1D_tipo1($$[$0-9],$$[$0-8],$$[$0-3],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 29: case 30:
this.$=new IncreDecre($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 31:
this.$=new If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 34:
this.$=null;
break;
case 35:
this.$=new Switch($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 36:
this.$=new Switch($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 37:
this.$=new Switch($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 38:
this.$=new Whiles($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 39:
this.$=new DoWhile($$[$0-1],$$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 40:
this.$=new Fors($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 43:
this.$=new Funciones($$[$0-6],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 44:
this.$=new Funciones($$[$0-5],$$[$0-6],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 45:
this.$=new Metodos($$[$0-6],$$[$0-7],$$[$0-4],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 46:
this.$=new Metodos($$[$0-5],$$[$0-6],[],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 47:
this.$=new Return($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$=new Return(null,_$[$0].first_line,_$[$0].first_column);
break;
case 49:
this.$=new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 50:
this.$=new Llamada($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$.push($$[$0]);this.$=$$[$0-2]
break;
case 52: case 79: case 83:
this.$=[$$[$0]];
break;
case 53:
this.$=new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54:
this.$=new Aritmetica($$[$0],$$[$0],'NEGACION');
break;
case 55: case 56: case 57: case 58: case 59: case 60:
this.$=new Aritmetica($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 61: case 62: case 63: case 64: case 65: case 66:
this.$=new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 67: case 68:
this.$=new Logicos($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 69:
this.$=new Logicos($$[$0],$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 71:
this.$=new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 78:
 this.$.push($$[$0]);this.$=$$[$0-2]
break;
case 80:
this.$.push($$[$0] + "," + $$[$0-1]); this.$ = $$[$0-3]
break;
case 81:
this.$=[$$[$0]+","+$$[$0-1]];
break;
case 82:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 84:
this.$={case: $$[$0-2],body:$$[$0]};
break;
case 85:
this.$= new Breaks(_$[$0].first_line,_$[$0].first_column);
break;
case 86:
this.$= new Continues(_$[$0].first_line,_$[$0].first_column);
break;
case 87:
this.$=new Dato($$[$0],TipoDato.ENTERO,_$[$0].first_line,_$[$0].first_column);
break;
case 88:
this.$=new Dato($$[$0],TipoDato.DECIMAL,_$[$0].first_line,_$[$0].first_column);
break;
case 89:
this.$=new Dato($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column);
break;
case 90:
this.$=new Dato($$[$0],TipoDato.CADENA,_$[$0].first_line,_$[$0].first_column);
break;
case 91:
this.$=new Dato($$[$0],TipoDato.BOOL,_$[$0].first_line,_$[$0].first_column);
break;
case 92:
this.$ = new Vars($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{1:[3]},{2:$V0,5:[1,40],6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,3]),{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},o($Vj,[2,9]),{8:[1,47]},o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{8:[1,48]},{8:[1,49]},{8:[1,50]},{8:[1,51]},{25:[1,52]},{29:[1,53]},{32:[1,55],35:54},{29:$Vk,36:$Vl,41:$Vm,42:$Vn},{29:[1,60]},{8:[2,48],21:64,26:61,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{29:[1,72]},{29:[1,73]},{44:[1,74]},{29:[1,75]},{32:[1,76]},{8:[2,85]},{8:[2,86]},{32:[1,77]},o($Vw,[2,73]),{51:[1,78]},o($Vw,[2,75]),o($Vw,[2,76]),o($Vw,[2,77]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,10]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),{21:64,26:79,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:80,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{8:$Vx,36:$Vy,37:[1,82],59:$Vz},o($VA,$VB,{29:[1,84]}),{21:64,26:85,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($VC,[2,29]),o($VC,[2,30]),{21:64,26:88,30:[1,87],32:$Vo,33:86,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:89,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{8:[2,47],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{21:64,26:105,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:106,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($VS,[2,70]),o($VS,[2,72]),o($VS,$VT,{29:$Vk}),o($VU,[2,87]),o($VU,[2,88]),o($VU,[2,89]),o($VU,[2,90]),o($VU,[2,91]),{21:64,26:107,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:108,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{2:$V0,4:109,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{9:111,11:112,32:[1,114],34:113,55:110,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg},{29:[1,115]},{29:[1,116]},{51:[1,117]},{8:[2,21],25:[1,118],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{30:[1,119],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{21:64,26:120,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{38:[1,121]},{32:[1,122]},{30:[1,124],34:125,56:123,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg},{8:[2,53],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{30:[1,126],59:$VV},o($VS,[2,50]),o($VW,[2,52],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR}),{30:[1,128],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{21:64,26:129,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:130,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:131,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:132,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:133,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:134,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:135,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:136,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:137,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:138,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:139,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:140,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:141,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:142,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{21:64,26:143,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($VX,[2,54],{62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o([8,25,30,51,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,69],{75:$VR}),{30:[1,144],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{30:[1,145],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,146],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{8:[1,147]},{8:[2,41]},{8:[2,42]},{32:[1,149],35:148},{36:$Vl},{30:[1,151],34:125,56:150,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg},{21:64,26:88,30:[1,153],32:$Vo,33:152,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{78:[1,154]},{27:[1,155]},{8:[2,23]},{8:[2,26],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{36:[1,156]},o($VA,[2,78]),{30:[1,157],59:$VY},{44:[1,159]},{32:[1,160]},o($VS,[2,49]),{21:64,26:161,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{44:[1,162]},o($VX,[2,55],{62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($VX,[2,56],{62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($VZ,[2,57],{64:$VH,75:$VR}),o($VZ,[2,58],{64:$VH,75:$VR}),o($VZ,[2,59],{75:$VR}),o($VZ,[2,60],{64:$VH,75:$VR}),o($V_,[2,61],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($V_,[2,62],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($V_,[2,63],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($V_,[2,64],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($V_,[2,65],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o($V_,[2,66],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,75:$VR}),o([8,25,30,51,59,72,73],[2,67],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,75:$VR}),o([8,25,30,51,59,73],[2,68],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,75:$VR}),{51:[1,163],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{44:[1,164]},{44:[1,165]},{52:[1,166]},{21:64,26:167,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{8:$Vx,36:$Vy,59:$Vz},o([8,36,59],$VB),{30:[1,168],59:$VY},{44:[1,169]},{30:[1,170],59:$VV},{8:[2,25]},o($Vw,[2,74]),{8:[2,22]},{39:[1,171]},{44:[1,172]},{34:173,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg},{2:$V0,4:174,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($VW,[2,81]),o($VW,[2,51],{60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR}),{2:$V0,4:175,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{21:64,26:176,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{49:177,50:[1,178],82:179,83:$V$},{2:$V0,4:181,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{29:[1,182]},{8:[1,183],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{44:[1,184]},{2:$V0,4:185,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{8:[2,24]},{34:186,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg},{2:$V0,4:187,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{32:[1,188]},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,189],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,190],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($VS,[2,71]),{45:[1,192],50:[1,191],82:193,83:$V$},{51:[1,194]},o($V01,[2,83]),{32:$V11,40:195,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,197],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{21:64,26:198,32:$Vo,40:65,60:$Vp,74:$Vq,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{12:199,32:[1,200]},{2:$V0,4:201,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,202],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{37:[1,203]},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,204],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($VW,[2,80]),o($Vj,[2,44]),o($Vj,[2,34],{46:205,47:[1,206]}),{51:[1,207]},o($Vj,[2,36]),o($V01,[2,82]),{2:$V0,4:208,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{51:[1,209]},o([38,51],$VT),o($Vj,[2,38]),{30:[1,210],60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,75:$VR},{30:[1,211]},{41:$Vm,42:$Vn},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,212],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,46]),{32:$V11,40:213,80:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($Vj,[2,43]),o($Vj,[2,31]),{13:215,43:$V5,44:[1,214]},{2:$V0,4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,217],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{2:$V0,4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,39]),{44:[1,219]},o($Vj,[2,45]),{38:[1,220]},{2:$V0,4:221,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,33]),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,222],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,37]),o($V01,[2,84],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,34:23,6:41,2:$V0,24:$V1,28:$V2,31:$V3,32:$V4,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi}),{2:$V0,4:223,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},{8:[2,28]},{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,224],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,35]),{2:$V0,6:41,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:$V1,28:$V2,31:$V3,32:$V4,34:23,43:$V5,45:[1,225],48:$V6,52:$V7,53:$V8,54:$V9,57:$Va,58:$Vb,76:$Vc,77:$Vd,79:$Ve,80:$Vf,81:$Vg,84:$Vh,85:$Vi},o($Vj,[2,32]),o($Vj,[2,40])],
defaultActions: {32:[2,85],33:[2,86],40:[2,1],111:[2,41],112:[2,42],119:[2,23],153:[2,25],155:[2,22],170:[2,24],220:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {TipoDato}= require('../Interprete/Expresion.js');
    const Dato = require('../Interprete/expresion/Dato.js');
    const Print = require('../Interprete/instruccion/print.js');
    const Aritmetica =require('../Interprete/expresion/Aritmetica.js');
    const Logicos =require('../Interprete/expresion/Logicos.js');
    const Relacionales =require('../Interprete/expresion/Relacionales.js');
    const Declaracion =require('../Interprete/instruccion/declaracion.js');
    const DecVec1D_tipo1 =require('../Interprete/instruccion/decVec1D_tipo1.js');
    const If =require('../Interprete/instruccion/if.js');
    const Ternario = require('../Interprete/expresion/Ternario.js');
    const Vars = require('../Interprete/expresion/Vars.js');
    const IncreDecre = require('../Interprete/expresion/IncreDecre.js');
    const Switch = require('../Interprete/instruccion/Switch.js');
    const Breaks = require('../Interprete/instruccion/breaks.js');
    const Continues = require('../Interprete/instruccion/continues.js');
    const Return = require('../Interprete/instruccion/Return.js');
    const Whiles = require('../Interprete/instruccion/Whiles.js');
    const DoWhile = require('../Interprete/instruccion/DoWhile.js');    
    const Fors = require('../Interprete/instruccion/Fors.js');
    const Asignacion = require('../Interprete/instruccion/Asignacion.js');
    const Funciones = require('../Interprete/instruccion/Funciones.js');
    const Metodos = require('../Interprete/instruccion/Metodos.js');
    const Llamada = require('../Interprete/instruccion/llamada.js');
    const Execute = require('../Interprete/instruccion/execute.js');
    const Error = require('../Interprete/errores/error.js');
    const sng = require('../Interprete/singleton/Manager.js');
    

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 76; 
break;
case 3: return 78; 
break;
case 4: return 79; 
break;
case 5: return 80; 
break;
case 6: return 81; 
break;
case 7: return 77; 
break;
case 8: return 43; 
break;
case 9: return 47; 
break;
case 10: return 39; 
break;
case 11: return 57; 
break;
case 12: return 31; 
break;
case 13: return 28; 
break;
case 14: return 24; 
break;
case 15: return 27; 
break;
case 16: return 48; 
break;
case 17: return 83; 
break;
case 18: return 50; 
break;
case 19: return 84; 
break;
case 20: return 85; 
break;
case 21: return 58; 
break;
case 22: return 52;
break;
case 23: return 54;
break;
case 24: return 53;
break;
case 25: return 25; 
break;
case 26: return 29; 
break;
case 27: return 30; 
break;
case 28: return 44; 
break;
case 29: return 45; 
break;
case 30: return 37; 
break;
case 31: return 38; 
break;
case 32: return 8; 
break;
case 33: return 59; 
break;
case 34: return 41; 
break;
case 35: return 42; 
break;
case 36: return 61; 
break;
case 37: return 60; 
break;
case 38: return 63; 
break;
case 39: return 62; 
break;
case 40:return "POTENCIA";
break;
case 41:return "MODULO";
break;
case 42: return 69; 
break;
case 43: return 67; 
break;
case 44: return 70; 
break;
case 45: return 68; 
break;
case 46: return 71; 
break;
case 47: return 66; 
break;
case 48: return 36; 
break;
case 49: return 75; 
break;
case 50: return 51; 
break;
case 51: return 73; 
break;
case 52: return 72; 
break;
case 53: return 74; 
break;
case 54:/* Espacios se ignoran */
break;
case 55: return 87; 
break;
case 56: return 86; 
break;
case 57: return 88; 
break;
case 58: return 89; 
break;
case 59: return 80; 
break;
case 60: return 32; 
break;
case 61:return 5;
break;
case 62: //let e = Error.addError( new Error(yy_.yytext, "Error Lexico",yy_.yylloc.first_line, yy_.yylloc.first_column)); 
    console.error('Error léxico: ' + yy_.yytext + ',  linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    
    sng.addError(new Error("Error Léxico",yy_.yytext,yy_.yylloc.first_line, yy_.yylloc.first_column));
    
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:std\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:execute\b)/i,/^(?:println\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:<<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \s\r\n\t])/i,/^(?:([0-9]+(\.)[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:((‘|')(.{1,2})(’|')))/i,/^(?:([\"][^\n\"]*[\"]))/i,/^(?:(true|false\b))/i,/^(?:([a-zA-Z_]+\w*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}