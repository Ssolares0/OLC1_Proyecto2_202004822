/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,11],$V2=[1,12],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[2,5,13,18,28,31,33,36,38,55,56,58,59,60,63],$Vc=[24,28],$Vd=[1,42],$Ve=[1,34],$Vf=[1,35],$Vg=[1,41],$Vh=[1,37],$Vi=[1,38],$Vj=[1,39],$Vk=[1,40],$Vl=[16,23,24,61],$Vm=[1,56],$Vn=[1,55],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[14,16,20,40,41,42,43,44,45,46,47,48,49,50,51,52,53],$VB=[14,16,20,25,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],$VC=[14,16,20,40,41,46,47,48,49,50,51,52,53],$VD=[14,16,20,40,41,42,43,46,47,48,49,50,51,52,53],$VE=[14,16,20,46,47,48,49,50,51,52,53],$VF=[1,105],$VG=[38,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"listainstruccion":4,"EOF":5,"instruccion":6,"print":7,"declaraVar":8,"declaraVect":9,"incanddec":10,"instrIf":11,"switches":12,"RCOUT":13,"MENOR_MENOR":14,"expresion":15,"PUNTOCOMA":16,"RENDL":17,"RPRINTLN":18,"PARIZQ":19,"PARDER":20,"tipos":21,"listaval":22,"IGUAL":23,"CORCHIZQ":24,"CORCHDER":25,"NEW":26,"datos":27,"VARIABLES":28,"INCREMENTO":29,"DECREMENTO":30,"IF":31,"LLAIZQ":32,"LLADER":33,"instrElse":34,"ELSE":35,"SWITCH":36,"listacasos":37,"DEFAULT":38,"DOSPUNTOS":39,"MENOS":40,"MAS":41,"POR":42,"DIV":43,"POTENCIA":44,"MODULO":45,"REL_IGUAL":46,"MENOR":47,"MAYOR":48,"MENORIGUAL":49,"MAYORIGUAL":50,"DIFERENTE":51,"AND":52,"OR":53,"NOT":54,"INT":55,"STD":56,"STRING":57,"CHAR":58,"BOOL":59,"DOUBLE":60,"COMA":61,"caso":62,"CASE":63,"ENTERO":64,"DECIMAL":65,"CARACTER":66,"CADENA":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"RCOUT",14:"MENOR_MENOR",16:"PUNTOCOMA",17:"RENDL",18:"RPRINTLN",19:"PARIZQ",20:"PARDER",23:"IGUAL",24:"CORCHIZQ",25:"CORCHDER",26:"NEW",28:"VARIABLES",29:"INCREMENTO",30:"DECREMENTO",31:"IF",32:"LLAIZQ",33:"LLADER",35:"ELSE",36:"SWITCH",38:"DEFAULT",39:"DOSPUNTOS",40:"MENOS",41:"MAS",42:"POR",43:"DIV",44:"POTENCIA",45:"MODULO",46:"REL_IGUAL",47:"MENOR",48:"MAYOR",49:"MENORIGUAL",50:"MAYORIGUAL",51:"DIFERENTE",52:"AND",53:"OR",54:"NOT",55:"INT",56:"STD",57:"STRING",58:"CHAR",59:"BOOL",60:"DOUBLE",61:"COMA",63:"CASE",64:"ENTERO",65:"DECIMAL",66:"CARACTER",67:"CADENA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,4],[7,6],[7,5],[8,5],[8,3],[9,11],[9,16],[10,3],[10,3],[11,8],[34,4],[34,2],[34,0],[12,10],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,1],[21,1],[21,4],[21,1],[21,1],[21,1],[22,3],[22,1],[37,2],[37,1],[62,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return this.$;
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$=[]; this.$.push($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 22: case 41: case 42: case 43: case 44: case 45: case 46:
this.$=$$[$0];
break;
case 10:
console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
break;
case 11:
this.$=new Print($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 12:
this.$=new Print($$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 13:
this.$=new Print($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 14:
this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 15:
this.$=new Declaracion($$[$0-1],$$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 16:
this.$=new Declaracion($$[$0-9],$$[$0-10],$$[$0-2],$$[$0-4],$$[$0-7],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 17:
this.$=new Declaracion($$[$0-14],$$[$0-15],null,null,_$[$0-15].first_line,_$[$0-15].first_column);
break;
case 18: case 19:
this.$=new IncreDecre($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$=new If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 21:
this.$=$$[$0-1];
break;
case 23:
this.$=null;
break;
case 24:
this.$=new Switch($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 25:
this.$=new Aritmetica($$[$0],$$[$0],'NEGACION');
break;
case 26: case 27: case 28: case 29: case 30: case 31:
this.$=new Aritmetica($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 32: case 33: case 34: case 35: case 36: case 37:
this.$=new Relacionales($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38: case 39:
this.$=new Logicos($$[$0-2],$$[$0],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
this.$=new Logicos($$[$0],$$[$0],$$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 47:
 this.$.push($$[$0]);this.$=$$[$0-2]
break;
case 48: case 50:
this.$=[$$[$0]];
break;
case 49:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 51:
this.$={case: $$[$0-2],body:$$[$0]};
break;
case 52:
this.$=new Dato($$[$0],TipoDato.ENTERO,_$[$0].first_line,_$[$0].first_column);
break;
case 53:
this.$=new Dato($$[$0],TipoDato.DECIMAL,_$[$0].first_line,_$[$0].first_column);
break;
case 54:
this.$=new Dato($$[$0],TipoDato.CHAR,_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$=new Dato($$[$0],TipoDato.CADENA,_$[$0].first_line,_$[$0].first_column);
break;
case 56:
this.$=new Dato($$[$0],TipoDato.BOOL,_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$ = new Vars($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{1:[3]},{2:$V0,5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{14:[1,24]},{19:[1,25]},{22:26,28:[1,27]},{29:[1,28],30:[1,29]},{19:[1,30]},{19:[1,31]},o($Vc,[2,42]),{39:[1,32]},o($Vc,[2,44]),o($Vc,[2,45]),o($Vc,[2,46]),{1:[2,1]},o($Vb,[2,2]),{15:33,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:43,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{16:[1,45],23:[1,44],24:[1,46],61:[1,47]},o($Vl,[2,48]),{16:[1,48]},{16:[1,49]},{15:50,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:51,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{39:[1,52]},{14:[1,54],16:[1,53],40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{15:69,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:70,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},o($VA,[2,41]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),o($VB,[2,55]),o($VB,[2,56]),o($VB,[2,57]),{20:[1,71],40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{15:72,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},o($Vb,[2,15]),{25:[1,73]},{28:[1,74]},o($Vb,[2,18]),o($Vb,[2,19]),{20:[1,75],40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{20:[1,76],40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{57:[1,77]},o($Vb,[2,11]),{17:[1,78]},{15:79,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:80,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:81,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:82,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:83,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:84,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:85,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:86,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:87,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:88,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:89,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:90,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:91,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{15:92,27:36,28:$Vd,40:$Ve,54:$Vf,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},o($VC,[2,25],{42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VA,[2,40]),{16:[1,93]},{16:[1,94],40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy,53:$Vz},{23:[1,95],24:[1,96]},o($Vl,[2,47]),{32:[1,97]},{32:[1,98]},o($Vc,[2,43]),{16:[1,99]},o($VC,[2,26],{42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VC,[2,27],{42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VD,[2,28],{44:$Vq,45:$Vr}),o($VD,[2,29],{44:$Vq,45:$Vr}),o($VA,[2,30]),o($VA,[2,31]),o($VE,[2,32],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VE,[2,33],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VE,[2,34],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VE,[2,35],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VE,[2,36],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o($VE,[2,37],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr}),o([14,16,20,52,53],[2,38],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx}),o([14,16,20,53],[2,39],{40:$Vm,41:$Vn,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,48:$Vu,49:$Vv,50:$Vw,51:$Vx,52:$Vy}),o($Vb,[2,13]),o($Vb,[2,14]),{26:[1,100]},{25:[1,101]},{2:$V0,4:102,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{37:103,62:104,63:$VF},o($Vb,[2,12]),{21:106,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{23:[1,107]},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,33:[1,108],36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{38:[1,109],62:110,63:$VF},o($VG,[2,50]),{27:111,28:$Vd,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{24:[1,112]},{26:[1,113]},o($Vb,[2,23],{34:114,35:[1,115]}),{39:[1,116]},o($VG,[2,49]),{39:[1,117]},{27:118,28:$Vd,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{21:119,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},o($Vb,[2,20]),{11:121,31:$V4,32:[1,120]},{2:$V0,4:122,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{2:$V0,4:123,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},{25:[1,124]},{24:[1,125]},{2:$V0,4:126,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},o($Vb,[2,22]),{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,33:[1,127],36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},o($VG,[2,51],{7:4,8:5,9:6,10:7,11:8,12:9,21:13,6:23,2:$V0,13:$V1,18:$V2,28:$V3,31:$V4,36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va}),{16:[1,128]},{27:129,28:$Vd,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{2:$V0,6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,18:$V2,21:13,28:$V3,31:$V4,33:[1,130],36:$V5,55:$V6,56:$V7,58:$V8,59:$V9,60:$Va},o($Vb,[2,24]),o($Vb,[2,16]),{25:[1,131]},o($Vb,[2,21]),{24:[1,132]},{27:133,28:$Vd,59:$Vg,64:$Vh,65:$Vi,66:$Vj,67:$Vk},{25:[1,134]},{16:[1,135]},o($Vb,[2,17])],
defaultActions: {22:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {TipoDato}= require('../Interprete/Expresion.js');
    const Dato = require('../Interprete/expresion/Dato.js');
    const Print = require('../Interprete/instruccion/print.js');
    const Aritmetica =require('../Interprete/expresion/Aritmetica.js');
    const Logicos =require('../Interprete/expresion/Logicos.js');
    const Relacionales =require('../Interprete/expresion/Relacionales.js');
    const Declaracion =require('../Interprete/instruccion/declaracion.js');
    const If =require('../Interprete/instruccion/if.js');
    const Vars = require('../Interprete/expresion/Vars.js');
    const IncreDecre = require('../Interprete/expresion/IncreDecre.js');
    const Switch = require('../Interprete/instruccion/Switch.js');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: return 55; 
break;
case 3: return 57; 
break;
case 4: return 58; 
break;
case 5: return 59; 
break;
case 6: return 60; 
break;
case 7: return 56; 
break;
case 8: return 31; 
break;
case 9: return 35; 
break;
case 10: return 26; 
break;
case 11: return 18; 
break;
case 12: return 13; 
break;
case 13: return 17; 
break;
case 14: return 36; 
break;
case 15: return 63; 
break;
case 16: return 38; 
break;
case 17: return 14; 
break;
case 18: return 19; 
break;
case 19: return 20; 
break;
case 20: return 32; 
break;
case 21: return 33; 
break;
case 22: return 24; 
break;
case 23: return 25; 
break;
case 24: return 16; 
break;
case 25: return 61; 
break;
case 26: return 29; 
break;
case 27: return 30; 
break;
case 28: return 41; 
break;
case 29: return 40; 
break;
case 30: return 43; 
break;
case 31: return 42; 
break;
case 32:return "POTENCIA";
break;
case 33:return "MODULO";
break;
case 34: return 49; 
break;
case 35: return 47; 
break;
case 36: return 50; 
break;
case 37: return 48; 
break;
case 38: return 51; 
break;
case 39: return 46; 
break;
case 40: return 23; 
break;
case 41: return 'TERNARIO'; 
break;
case 42: return 39; 
break;
case 43: return 53; 
break;
case 44: return 52; 
break;
case 45: return 54; 
break;
case 46:/* Espacios se ignoran */
break;
case 47: return 65; 
break;
case 48: return 64; 
break;
case 49: return 66; 
break;
case 50: return 67; 
break;
case 51: return 59; 
break;
case 52: return 28; 
break;
case 53:return 5;
break;
case 54: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:(\/\/.*))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:double\b)/i,/^(?:std\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:new\b)/i,/^(?:println\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:<<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[ \s\r\n\t])/i,/^(?:([0-9]+(\.)[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:((‚Äò|')(.{1,2})(‚Äô|')))/i,/^(?:(("|‚Äú)(\\.|[^\"])*("|‚Äù)))/i,/^(?:(true|false\b))/i,/^(?:([a-zA-Z_]+\w*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}